// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SecurityEssentials.Acceptance.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Security")]
    public partial class SecurityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Security.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Security", "\tIn order to avoid information disclosure\r\n\tAs a pen tester\r\n\tI want to be sure t" +
                    "he application has the correct security settings and behaviour", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("I delete all cookies from the cache", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("I clear down the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("I have the standard set of lookups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The web application will log a content security policy violation")]
        public void TheWebApplicationWillLogAContentSecurityPolicyViolation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The web application will log a content security policy violation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table50.AddRow(new string[] {
                            "BlockedUri",
                            "http://myevilsite.com/stealdetails/capture/"});
                table50.AddRow(new string[] {
                            "DocumentUri",
                            "http://mysite.com/innocentpage/"});
                table50.AddRow(new string[] {
                            "LineNumber",
                            "1"});
                table50.AddRow(new string[] {
                            "Referrer",
                            ""});
                table50.AddRow(new string[] {
                            "OriginalPolicy",
                            "default-src http://localhost:4845"});
                table50.AddRow(new string[] {
                            "ScriptSample",
                            "#modernizr{font:0/0 a}#modernizr:after{c..."});
                table50.AddRow(new string[] {
                            "SourceFile",
                            "http://mysite.com/innocentpage/"});
                table50.AddRow(new string[] {
                            "ViolatedDirective",
                            "default-src http://mysite.com"});
#line 12
 testRunner.Given("I have a content security policy violation with details:", ((string)(null)), table50, "Given ");
#line hidden
#line 22
 testRunner.When("I post the content security policy violation to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.And("I wait 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then("I have 1 content security policy violation in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table51.AddRow(new string[] {
                            "Level",
                            "Warning"});
                table51.AddRow(new string[] {
                            "Message",
                            "Content Security Policy Violation"});
#line 25
 testRunner.And("I have a log in the system matching the following:", ((string)(null)), table51, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The web application will log a http public key pinning violation")]
        public void TheWebApplicationWillLogAHttpPublicKeyPinningViolation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The web application will log a http public key pinning violation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table52.AddRow(new string[] {
                            "DateTime",
                            "2017-12-07"});
                table52.AddRow(new string[] {
                            "HostName",
                            "http://mysite.com/"});
                table52.AddRow(new string[] {
                            "Port",
                            "8080"});
                table52.AddRow(new string[] {
                            "ExpirationDate",
                            "2018-12-01"});
                table52.AddRow(new string[] {
                            "IncludeSubDomains",
                            "True"});
                table52.AddRow(new string[] {
                            "NotedHostName",
                            ""});
                table52.AddRow(new string[] {
                            "ServedCertificateChainDelimited",
                            "pem1,pem2,pem3"});
                table52.AddRow(new string[] {
                            "ValidatedCertificateChainDelimited",
                            "pem1,pem2,pem4"});
                table52.AddRow(new string[] {
                            "KnownPinsDelimited",
                            "known-pin1,known-pin2,known-pin3"});
#line 31
 testRunner.Given("I have a http public key pinning violation with details:", ((string)(null)), table52, "Given ");
#line hidden
#line 42
 testRunner.When("I post the http public key pinning violation to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.And("I wait 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.Then("I have 1 http public key pinning violation in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table53.AddRow(new string[] {
                            "Level",
                            "Warning"});
                table53.AddRow(new string[] {
                            "Message",
                            "HostName: \"http://mysite.com/\""});
#line 45
 testRunner.And("I have a log in the system matching the following:", ((string)(null)), table53, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The web application will log a certificate policy violation")]
        public void TheWebApplicationWillLogACertificatePolicyViolation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The web application will log a certificate policy violation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table54.AddRow(new string[] {
                            "FailureDate",
                            "[Now]"});
                table54.AddRow(new string[] {
                            "ExpirationDate",
                            "[1 Month From Now]"});
                table54.AddRow(new string[] {
                            "HostName",
                            "example.com"});
                table54.AddRow(new string[] {
                            "Port",
                            "8080"});
                table54.AddRow(new string[] {
                            "Source",
                            "web"});
#line 51
 testRunner.Given("I have a certificate policy violation with details:", ((string)(null)), table54, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "SerialisedSct",
                            "Source",
                            "Status",
                            "Version"});
                table55.AddRow(new string[] {
                            "ABCDEFG",
                            "tls-extension",
                            "valid",
                            "1"});
                table55.AddRow(new string[] {
                            "CDEFGHIJ",
                            "tls-extension",
                            "valid",
                            "2"});
#line 58
 testRunner.And("I have the following certificate policy violation scts:", ((string)(null)), table55, "And ");
#line hidden
#line 62
 testRunner.When("I post the certificate policy violation to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.And("I wait 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.Then("I have 1 certificate policy violation in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table56.AddRow(new string[] {
                            "Level",
                            "Warning"});
                table56.AddRow(new string[] {
                            "Message",
                            "Certificate Transparency Violation"});
#line 65
 testRunner.And("I have a log in the system matching the following:", ((string)(null)), table56, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The web application will return the correct security headers")]
        [NUnit.Framework.CategoryAttribute("CheckForErrors")]
        public void TheWebApplicationWillReturnTheCorrectSecurityHeaders()
        {
            string[] tagsOfScenario = new string[] {
                    "CheckForErrors"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The web application will return the correct security headers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 73
 testRunner.When("I call http get on the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table57.AddRow(new string[] {
                            "X-Frame-Options",
                            "Deny"});
                table57.AddRow(new string[] {
                            "X-Content-Type-Options",
                            "nosniff"});
                table57.AddRow(new string[] {
                            "X-XSS-Protection",
                            "1; mode=block; report=/Security/CspReporting"});
                table57.AddRow(new string[] {
                            "Referrer-Policy",
                            "origin"});
                table57.AddRow(new string[] {
                            "Permissions-Policy",
                            "geolocation=(), midi=(), camera=(),usb=(), magnetometer=(), sync-xhr=(), micropho" +
                                "ne=(), camera=(), gyroscope=(), speaker=(), payment=()"});
                table57.AddRow(new string[] {
                            "Content-Security-Policy",
                            @"default-src 'self'; style-src 'self' 'unsafe-inline' https://unpkg.com/gridjs/; img-src * data:; font-src 'self' https: data:; script-src 'self' https://unpkg.com/gridjs-jquery/; connect-src 'self'; frame-ancestors 'self'; form-action 'self'; base-uri 'self'; object-src 'none'; report-uri /Security/CspReporting"});
#line 74
 testRunner.Then("the response headers will contain:", ((string)(null)), table57, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key"});
                table58.AddRow(new string[] {
                            "X-AspNet-Version"});
                table58.AddRow(new string[] {
                            "X-AspNetMvc-Version"});
                table58.AddRow(new string[] {
                            "Server"});
#line 82
 testRunner.And("the response headers will not contain:", ((string)(null)), table58, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The application will prevent a brute force login attempt")]
        [NUnit.Framework.CategoryAttribute("CheckForErrors")]
        public void TheApplicationWillPreventABruteForceLoginAttempt()
        {
            string[] tagsOfScenario = new string[] {
                    "CheckForErrors"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The application will prevent a brute force login attempt", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 90
 testRunner.Given("I navigate to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
 testRunner.And("I maximise the browser window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And("I am taken to the homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("I click the login link in the navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("I am navigated to the \'login\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table59.AddRow(new string[] {
                            "UserName",
                            "attempt1@test.net"});
                table59.AddRow(new string[] {
                            "Password",
                            "rhubarb22"});
#line 95
 testRunner.And("I enter the following login data:", ((string)(null)), table59, "And ");
#line hidden
#line 99
 testRunner.And("I click the login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("I navigate to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("I am taken to the homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("I click the login link in the navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("I am navigated to the \'login\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table60.AddRow(new string[] {
                            "UserName",
                            "attempt2@test.net"});
                table60.AddRow(new string[] {
                            "Password",
                            "rhubarb22"});
#line 104
 testRunner.And("I enter the following login data:", ((string)(null)), table60, "And ");
#line hidden
#line 108
 testRunner.And("I click the login button as quickly as possible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("I navigate to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("I am taken to the homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("I click the login link in the navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("I am navigated to the \'login\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table61.AddRow(new string[] {
                            "UserName",
                            "attempt3@test.net"});
                table61.AddRow(new string[] {
                            "Password",
                            "rhubarb22"});
#line 113
 testRunner.And("I enter the following login data:", ((string)(null)), table61, "And ");
#line hidden
#line 117
 testRunner.And("I click the login button as quickly as possible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.And("I navigate to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("I am taken to the homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And("I click the login link in the navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.And("I am navigated to the \'login\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table62.AddRow(new string[] {
                            "UserName",
                            "attempt4@test.net"});
                table62.AddRow(new string[] {
                            "Password",
                            "rhubarb22"});
#line 122
 testRunner.And("I enter the following login data:", ((string)(null)), table62, "And ");
#line hidden
#line 126
 testRunner.When("I click the login button as quickly as possible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
 testRunner.And("I wait 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.Then("an error message is shown \'You have requested this resource too many times in the" +
                        " last 60 seconds.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user with an expired password is redirected to the change password page until t" +
            "hey change the password")]
        [NUnit.Framework.CategoryAttribute("CheckForErrors")]
        public void AUserWithAnExpiredPasswordIsRedirectedToTheChangePasswordPageUntilTheyChangeThePassword()
        {
            string[] tagsOfScenario = new string[] {
                    "CheckForErrors"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user with an expired password is redirected to the change password page until t" +
                    "hey change the password", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserName",
                            "Title",
                            "FirstName",
                            "LastName",
                            "Password",
                            "SecurityQuestion",
                            "SecurityAnswer",
                            "IsAdmin",
                            "Approved",
                            "Enabled",
                            "WorkTelephoneNumber",
                            "HomeTelephoneNumber",
                            "MobileTelephoneNumber",
                            "Town",
                            "Postcode",
                            "SkypeName",
                            "PasswordExpiryDate"});
                table63.AddRow(new string[] {
                            "user1@test.net",
                            "Mr",
                            "Needs",
                            "Approval",
                            "zasXX8576jFj123",
                            "What is the name of your first pet?",
                            "Beatrix",
                            "false",
                            "true",
                            "true",
                            "0123",
                            "0456",
                            "0789",
                            "town",
                            "postcode",
                            "skype",
                            "[Expired]"});
#line 132
 testRunner.Given("the following users are setup in the database:", ((string)(null)), table63, "Given ");
#line hidden
#line 135
 testRunner.And("the user \'user1@test.net\' has the password expiry date set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And("I navigate to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.And("I maximise the browser window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And("I click the login link in the navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.And("I am navigated to the \'Login\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table64.AddRow(new string[] {
                            "UserName",
                            "user1@test.net"});
                table64.AddRow(new string[] {
                            "Password",
                            "zasXX8576jFj123"});
#line 140
 testRunner.And("I enter the following login data:", ((string)(null)), table64, "And ");
#line hidden
#line 144
 testRunner.And("I click the login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And("I am navigated to the \'Change Password\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("I select Admin -> Change Security Information from the menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("I am navigated to the \'Change Password\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And("I select Admin -> Manage Account from the menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.And("I am navigated to the \'Change Password\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table65.AddRow(new string[] {
                            "CurrentPassword",
                            "zasXX8576jFj123"});
                table65.AddRow(new string[] {
                            "NewPassword",
                            "NewPassword45678"});
                table65.AddRow(new string[] {
                            "ConfirmNewPassword",
                            "NewPassword45678"});
#line 150
 testRunner.And("I enter the following change password data:", ((string)(null)), table65, "And ");
#line hidden
#line 155
 testRunner.When("I submit the change password form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.Then("I am navigated to the \'Change Password Success\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
 testRunner.And("the user \'user1@test.net\' does not have the password expiry date set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.And("I select Admin -> Change Security Information from the menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.And("I am navigated to the \'Login\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table66.AddRow(new string[] {
                            "UserName",
                            "user1@test.net"});
                table66.AddRow(new string[] {
                            "Password",
                            "NewPassword45678"});
#line 160
 testRunner.And("I enter the following login data:", ((string)(null)), table66, "And ");
#line hidden
#line 164
 testRunner.And("I click the login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
 testRunner.And("I am navigated to the \'Change Security Information\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
